<# 
    Script Name:   BusinessLogic.ps1
    Description:   Local PowerShell script for to preprocess the raw data from the Azure Monitor.
                   This script processes a CSV file containing resource usage statistics (CPU and RAM) and:
                     - Adds fields for days of the week (Monday-Sunday) and hours (00-23) to enable time-based analysis.
                     - Calculates the "Concrete Hour" for each entry, indicating the exact hour of the event.
                     - Identifies alert series: a sequence of three or more entries where either CPU or RAM usage exceeds 80%.
                     - Outputs the enriched dataset to a new CSV file, ready for further analysis or integration.
                   This functionality supports intelligent decision-making by providing a detailed resource usage pattern
                   and highlighting potential periods of overutilization.

    Version:       1.0
    Created By:    Moritz KrÃ¤uliger (moritz.kraeuliger@students.fhnw.ch)
    Last Modified: 2024-12-01 

    Inputs: 
      - A CSV file (`cpu_ram_usage_with_gui.csv`) containing columns like "date," "Percentage CPU (Avg)," and "Percentage RAM (Avg)."

    Outputs:
      - A processed CSV file (`cpu_ram_usage_with_concrete_hour_alert_series.csv`) with additional analytics columns.
#>

# Import the CSV file generated by the previous script
$filePath = "C:\temp\cpu_ram_usage_with_gui.csv"
$data = Import-Csv -Path $filePath

# Extend the table with Monday-Sunday fields, 00-24 hour fields, and a Concrete Hour field
foreach ($row in $data) {
    # Parse the date and time of the current row
    $currentDateTime = [datetime]::ParseExact($row.date, "dd.MM.yyyy HH:mm", $null)
    $currentDayOfWeek = $currentDateTime.DayOfWeek.ToString()
    $currentHour = $currentDateTime.Hour

    # Add Monday-Sunday columns (1 if it's this day, 0 otherwise)
    $row | Add-Member -MemberType NoteProperty -Name Monday -Value 0
    $row | Add-Member -MemberType NoteProperty -Name Tuesday -Value 0
    $row | Add-Member -MemberType NoteProperty -Name Wednesday -Value 0
    $row | Add-Member -MemberType NoteProperty -Name Thursday -Value 0
    $row | Add-Member -MemberType NoteProperty -Name Friday -Value 0
    $row | Add-Member -MemberType NoteProperty -Name Saturday -Value 0
    $row | Add-Member -MemberType NoteProperty -Name Sunday -Value 0

    if ($currentDayOfWeek -eq "Monday") { $row.Monday = 1 }
    elseif ($currentDayOfWeek -eq "Tuesday") { $row.Tuesday = 1 }
    elseif ($currentDayOfWeek -eq "Wednesday") { $row.Wednesday = 1 }
    elseif ($currentDayOfWeek -eq "Thursday") { $row.Thursday = 1 }
    elseif ($currentDayOfWeek -eq "Friday") { $row.Friday = 1 }
    elseif ($currentDayOfWeek -eq "Saturday") { $row.Saturday = 1 }
    elseif ($currentDayOfWeek -eq "Sunday") { $row.Sunday = 1 }

    # Add columns for hours (00-24) and set 1 if it's the current hour, 0 otherwise
    for ($hour = 0; $hour -lt 24; $hour++) {
        $hourField = "Hour_" + "{0:D2}" -f $hour
        $row | Add-Member -MemberType NoteProperty -Name $hourField -Value 0
        if ($currentHour -eq $hour) {
            $row.$hourField = 1
        }
    }

    # Add a column for the concrete hour (exact hour of the entry)
    $row | Add-Member -MemberType NoteProperty -Name "Concrete Hour" -Value $currentHour
}

# Add Alert Series column (1 if current and next two values are above 80%)
for ($i = 0; $i -lt $data.Count - 2; $i++) {
    # Get current, next, and next two rows
    $currentRow = $data[$i]
    $nextRow = $data[$i + 1]
    $nextTwoRow = $data[$i + 2]

    # Check if current, next, and next two CPU or RAM values are above 80%
    $currentCPU = [double]$currentRow."Percentage CPU (Avg)"
    $currentRAM = [double]$currentRow."Percentage RAM (Avg)"
    $nextCPU = [double]$nextRow."Percentage CPU (Avg)"
    $nextRAM = [double]$nextRow."Percentage RAM (Avg)"
    $nextTwoCPU = [double]$nextTwoRow."Percentage CPU (Avg)"
    $nextTwoRAM = [double]$nextTwoRow."Percentage RAM (Avg)"

    # Set Alert Series to 1 if current, next, and next two metrics exceed 80%
    if (($currentCPU -gt 80 -or $currentRAM -gt 80) -and
        ($nextCPU -gt 80 -or $nextRAM -gt 80) -and
        ($nextTwoCPU -gt 80 -or $nextTwoRAM -gt 80)) {
        $currentRow | Add-Member -MemberType NoteProperty -Name "Alert Series" -Value 1
    } else {
        $currentRow | Add-Member -MemberType NoteProperty -Name "Alert Series" -Value 0
    }
}

# Handle the last two rows, since they don't have enough subsequent rows for comparison
$data[-1] | Add-Member -MemberType NoteProperty -Name "Alert Series" -Value 0
$data[-2] | Add-Member -MemberType NoteProperty -Name "Alert Series" -Value 0

# Export the updated data to a new CSV file
$data | Export-Csv -Path "C:\temp\cpu_ram_usage_with_concrete_hour_alert_series.csv" -NoTypeInformation

# Output the data for display
$data | Format-Table -AutoSize
